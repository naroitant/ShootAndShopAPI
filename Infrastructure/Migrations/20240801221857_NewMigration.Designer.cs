// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240801221857_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.LockType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LockTypes");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<Guid?>("MagazineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManufacturerNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PriceInUsd")
                        .HasColumnType("numeric");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RedDotSightId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MagazineId");

                    b.HasIndex("RedDotSightId");

                    b.HasIndex("ScopeId");

                    b.ToTable("Product");

                    b.HasDiscriminator().HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("PriceInUsd")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.RifleActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RifleActionTypes");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.SafetyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SafetyTypes");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.ShotgunActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShotgunActionTypes");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Ammo", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<int>("RoundsPerBox")
                        .HasColumnType("integer");

                    b.Property<double>("VelocityInFps")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightInGrains")
                        .HasColumnType("double precision");

                    b.HasIndex("ManufacturerId");

                    b.HasDiscriminator().HasValue("Ammo");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Axe", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<double>("BladeLengthInInches")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("double precision");

                    b.Property<Guid>("BladeMaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HandleMaterialId")
                        .HasColumnType("uuid");

                    b.Property<double>("OverallLengthInInches")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("double precision");

                    b.HasIndex("BladeMaterialId");

                    b.HasIndex("HandleMaterialId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Product", t =>
                        {
                            t.Property("BladeMaterialId")
                                .HasColumnName("Axe_BladeMaterialId");

                            t.Property("HandleMaterialId")
                                .HasColumnName("Axe_HandleMaterialId");
                        });

                    b.HasDiscriminator().HasValue("Axe");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.FireArm", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<double>("BarrelLengthInInches")
                        .HasColumnType("double precision");

                    b.Property<int>("CapacityWithoutChamber")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("FireArm");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Item", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uuid");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("Product", t =>
                        {
                            t.Property("ProductId")
                                .HasColumnName("Item_ProductId");
                        });

                    b.HasDiscriminator().HasValue("Item");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Knife", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<double>("BladeLengthInInches")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("double precision");

                    b.Property<Guid>("BladeMaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("BladeStyle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HandleMaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("KnifeStyle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("OverallLengthInInches")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("double precision");

                    b.HasIndex("BladeMaterialId");

                    b.HasIndex("HandleMaterialId");

                    b.HasIndex("ManufacturerId");

                    b.HasDiscriminator().HasValue("Knife");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Magazine", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid");

                    b.Property<int>("RoundCapacity")
                        .HasColumnType("integer");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("Magazine");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.RedDotSight", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<int>("DotSizeInMoa")
                        .HasColumnType("integer");

                    b.Property<int>("Magnification")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectiveSizeInMillimeters")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("RedDotSight");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Scope", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.Product");

                    b.Property<double>("EyeReliefInInches")
                        .HasColumnType("double precision");

                    b.Property<int>("ObjectiveSizeInMillimeters")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("Scope");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Rifle", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.FireArm");

                    b.Property<Guid>("RifleActionTypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("RifleActionTypeId");

                    b.HasDiscriminator().HasValue("Rifle");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Shotgun", b =>
                {
                    b.HasBaseType("ShootAndShopAPI.Domain.Entities.FireArm");

                    b.Property<Guid>("ShotgunActionTypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ShotgunActionTypeId");

                    b.HasDiscriminator().HasValue("Shotgun");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("ShootAndShopAPI.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Payment", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Seller", "Seller")
                        .WithMany("Payments")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Magazine", null)
                        .WithMany("CompatibleProducts")
                        .HasForeignKey("MagazineId");

                    b.HasOne("ShootAndShopAPI.Domain.Entities.RedDotSight", null)
                        .WithMany("CompatibleProducts")
                        .HasForeignKey("RedDotSightId");

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Scope", null)
                        .WithMany("CompatibleProducts")
                        .HasForeignKey("ScopeId");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.ProductPrice", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("PriceHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Seller", b =>
                {
                    b.OwnsOne("ShootAndShopAPI.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SellerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SellerId");

                            b1.ToTable("Sellers");

                            b1.WithOwner()
                                .HasForeignKey("SellerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Customer", "Customer")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("ShootAndShopAPI.Domain.Entities.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Ammo", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Ammos")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Axe", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Material", "BladeMaterial")
                        .WithMany()
                        .HasForeignKey("BladeMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Material", "HandleMaterial")
                        .WithMany()
                        .HasForeignKey("HandleMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Axes")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BladeMaterial");

                    b.Navigation("HandleMaterial");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.FireArm", b =>
                {
                    b.OwnsOne("ShootAndShopAPI.Domain.ValueObjects.Caliber", "Caliber", b1 =>
                        {
                            b1.Property<Guid>("FireArmId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Amount")
                                .HasColumnType("double precision");

                            b1.Property<int>("Unit")
                                .HasColumnType("integer");

                            b1.HasKey("FireArmId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("FireArmId");
                        });

                    b.Navigation("Caliber")
                        .IsRequired();
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Item", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.ShoppingCart", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("Manufacturer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Knife", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Material", "BladeMaterial")
                        .WithMany()
                        .HasForeignKey("BladeMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Material", "HandleMaterial")
                        .WithMany()
                        .HasForeignKey("HandleMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Knives")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BladeMaterial");

                    b.Navigation("HandleMaterial");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Magazine", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Magazines")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.RedDotSight", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("RedDotSights")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Scope", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Scopes")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ShootAndShopAPI.Domain.ValueObjects.FovRange", "FovRange", b1 =>
                        {
                            b1.Property<Guid>("ScopeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("FovInFeetAtOneHundredYards")
                                .HasColumnType("double precision");

                            b1.Property<double>("FovInFeetAtZeroYards")
                                .HasColumnType("double precision");

                            b1.HasKey("ScopeId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ScopeId");
                        });

                    b.OwnsOne("ShootAndShopAPI.Domain.ValueObjects.MagnificationRange", "MagnificationRange", b1 =>
                        {
                            b1.Property<Guid>("ScopeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("MaxMagnification")
                                .HasColumnType("integer");

                            b1.Property<int>("MinMagnification")
                                .HasColumnType("integer");

                            b1.HasKey("ScopeId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ScopeId");
                        });

                    b.Navigation("FovRange")
                        .IsRequired();

                    b.Navigation("MagnificationRange")
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Rifle", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Rifles")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.RifleActionType", "RifleActionType")
                        .WithMany("Rifles")
                        .HasForeignKey("RifleActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("RifleActionType");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Shotgun", b =>
                {
                    b.HasOne("ShootAndShopAPI.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Shotguns")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShootAndShopAPI.Domain.Entities.ShotgunActionType", "ShotgunActionType")
                        .WithMany("Shotguns")
                        .HasForeignKey("ShotgunActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("ShotgunActionType");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Ammos");

                    b.Navigation("Axes");

                    b.Navigation("Knives");

                    b.Navigation("Magazines");

                    b.Navigation("RedDotSights");

                    b.Navigation("Rifles");

                    b.Navigation("Scopes");

                    b.Navigation("Shotguns");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.RifleActionType", b =>
                {
                    b.Navigation("Rifles");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Seller", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.ShotgunActionType", b =>
                {
                    b.Navigation("Shotguns");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Magazine", b =>
                {
                    b.Navigation("CompatibleProducts");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.RedDotSight", b =>
                {
                    b.Navigation("CompatibleProducts");
                });

            modelBuilder.Entity("ShootAndShopAPI.Domain.Entities.Scope", b =>
                {
                    b.Navigation("CompatibleProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
